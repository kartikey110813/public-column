{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","imageUrl","caption","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","console","log","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","border","boxShadow","shadows","padding","spacing","ImageUpload","modalStyle","open","setOpen","classes","setCaption","progress","setProgress","image","setImage","Modal","onClose","style","max","files","Button","onClick","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","App","openSignIn","setOpenSignIn","posts","setPosts","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","id","post","Input","createUserWithEmailAndPassword","updateProfile","catch","err","signInWithEmailAndPassword","signOut","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VAeMA,EAbcC,IAASC,cAAc,CAEnCC,OAAQ,0CACZC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,YACjBC,EAAOX,IAASW,OAChBC,EAAWZ,IAASY,UC2EXC,MAtFf,YAA8D,IAAD,EAA7CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAAW,EACzBC,mBAAS,IADgB,mBAClDC,EADkD,KACxCC,EADwC,OAE3BF,mBAAS,IAFkB,mBAElDG,EAFkD,KAEzCC,EAFyC,KAoCzD,OAhCAC,qBAAU,WACN,IAAIC,EAcJ,OAbIX,IACAY,QAAQC,IAAIb,GACZW,EAAc1B,EACT6B,WAAW,SACXC,IAAIf,GACJc,WAAW,YACXE,QAAQ,YAAa,OACrBC,YAAW,SAACC,GACTX,EAAYW,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,WAC3CT,QAAQC,IAAIP,OAIjB,WACHK,OAGL,CAACX,IAcA,yBAAKsB,UAAU,QACX,yBAAKA,UAAU,gBACX,kBAACC,EAAA,EAAD,CACID,UAAU,eACVE,IAAKtB,EAASA,SACduB,IAAI,+BAER,4BAAKvB,EAASA,WAGlB,yBAAKoB,UAAU,cAAcG,IAAKtB,EAAUqB,IAAI,KAChD,wBAAIF,UAAU,cAAd,IAA4B,gCAASpB,EAASA,UAA9C,IAAkEE,GAElEH,GACA,yBAAKqB,UAAU,kBACdhB,EAASc,KAAI,SAACZ,GAAD,OACV,2BACI,gCAASA,EAAQN,UADrB,IACyCM,EAAQkB,UAOpDzB,GACG,0BAAMqB,UAAU,oBAChB,2BACIA,UAAU,cACVK,KAAK,OACLC,YAAY,mBACZC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAWsB,EAAEC,OAAOH,UAEzC,+BACIP,UAAU,eACVW,UAAWzB,GAFf,0BAGeP,GAHf,qBAIS,UAJT,yBA7CQ,SAACiC,GACjBA,EAAMC,iBAENlD,EAAG6B,WAAW,SAASC,IAAIf,GAAQc,WAAW,YAAYsB,IAAI,CAC1DV,KAAMlB,EACNN,SAAUD,EAAKoC,YACfC,UAAWpD,IAASU,UAAU2C,WAAWC,oBAE7C/B,EAAW,OAqCH,c,8BCpEhB,SAASgC,IAIL,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAGb,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiB,UACjBC,OAAQ,iBACRC,UAAWN,EAAMO,QAAQ,GACzBC,QAASR,EAAMS,QAAQ,EAAG,EAAG,QAsFpBC,MAlFf,SAAqBvD,GAAW,IAAD,EAERG,mBAASoC,GAAvBiB,EAFsB,sBAGLrD,oBAAS,GAHJ,mBAGtBsD,EAHsB,KAGhBC,EAHgB,KAIvBC,EAAUhB,IAJa,EAOIxC,mBAAS,IAPb,mBAOpBD,EAPoB,KAOV0D,EAPU,OAQKzD,mBAAS,GARd,mBAQpB0D,EARoB,KAQTC,EARS,OASF3D,mBAAS,MATP,mBASpB4D,EAToB,KASdC,EATc,KAkD3B,OAEI,yBAAK5C,UAAU,UACf,kBAAC6C,EAAA,EAAD,CACAR,KAAMA,EACNS,QAAS,kBAAMR,GAAQ,KAEzB,yBAAKS,MAAOX,EAAYpC,UAAWuC,EAAQb,OAC3C,yBAAK1B,UAAU,eACf,8BAAUA,UAAU,wBAAwBO,MAAOkC,EAAUO,IAAI,QACjE,2BAAO3C,KAAK,OAAOC,YAAY,kBAAkBE,SAAW,SAAAI,GAAK,OAAI4B,EAAW5B,EAAMF,OAAOH,QAAQA,MAAOzB,IAC5G,2BAAOuB,KAAK,OAAOG,SAlDA,SAACC,GACdA,EAAEC,OAAOuC,MAAM,IACfL,EAASnC,EAAEC,OAAOuC,MAAM,OAiD9B,kBAACC,EAAA,EAAD,CAAQC,QA7CW,SAAC1C,GACAjC,EAAQ4E,IAAR,iBAAsBT,EAAMU,OAAQC,IAAIX,GAChDY,GACP,iBACA,SAAC3D,GACG,IAAM6C,EAAWe,KAAKC,MAAO7D,EAAS8D,iBAAmB9D,EAAS+D,WAAc,KACjFjB,EAAYD,MAEf,SAACmB,GACGtE,QAAQC,IAAIqE,GACZC,MAAMD,EAAME,YAEhB,WACItF,EAAQ4E,IAAI,UACXW,MAAMpB,EAAMU,MACZW,iBACAC,MAAK,SAAAC,GACFvG,EAAG6B,WAAW,SAASsB,IAAI,CACvBE,UAAYpD,IAASU,UAAU2C,WAAWC,kBAC1CpC,QAAQA,EACRD,SAASqF,EACTtF,SAASA,IAEb8D,EAAY,GACZF,EAAW,IACXI,EAAS,MACTN,GAAQ,WAmBrB,aAUA,yBAAKtC,UAAU,eACP,yBAAKA,UAAU,iBAAiBmD,QAAS,kBAAMb,GAAQ,IAAOnC,IAAI,gD,gBCtFhF,SAASgB,IAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiB,UACjBC,OAAQ,iBACRC,UAAWN,EAAMO,QAAQ,GACzBC,QAASR,EAAMS,QAAQ,EAAG,EAAG,QA+KlBiC,MA3Kf,WACE,IAAM5B,EAAUhB,IADH,EAEQxC,mBAASoC,GAAvBiB,EAFM,sBAGWrD,oBAAS,GAHpB,mBAGNsD,EAHM,KAGAC,EAHA,OAIuBvD,oBAAS,GAJhC,mBAINqF,EAJM,KAIMC,EAJN,OAMatF,mBAAS,IANtB,mBAMNuF,EANM,KAMCC,EAND,OAOmBxF,mBAAS,IAP5B,mBAONH,EAPM,KAOI4F,EAPJ,OAQazF,mBAAS,IARtB,mBAQN0F,EARM,KAQCC,EARD,OASmB3F,mBAAS,IAT5B,mBASN4F,EATM,KASIC,EATJ,OAUW7F,mBAAS,MAVpB,mBAUNJ,EAVM,KAUAkG,EAVA,KA6Eb,OAjEAzF,qBAAU,WACR,IAAMC,EAAcd,EAAKuG,oBAAmB,SAACC,GACvCA,GAEFzF,QAAQC,IAAIwF,GACZF,EAAQE,IAaRF,EAAQ,SAIZ,OAAO,WAELxF,OAED,CAACV,EAAMC,IAEVQ,qBAAU,WACRzB,EAAG6B,WAAW,SAASE,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAE7D2E,EAAS3E,EAASC,KAAKC,KAAI,SAAAL,GAAG,MAAK,CACjCuF,GAAIvF,EAAIuF,GACRC,KAAMxF,EAAIM,iBAGb,IA8BD,yBAAKC,UAAU,OAEb,kBAAC6C,EAAA,EAAD,CACER,KAAMA,EACNS,QAAS,kBAAMR,GAAQ,KAEvB,yBAAKS,MAAOX,EAAYpC,UAAWuC,EAAQb,OACzC,0BAAM1B,UAAU,eACd,gCACE,wBAAIA,UAAU,oBAAd,kBAGF,kBAACkF,EAAA,EAAD,CAAO5E,YAAY,WAAWD,KAAK,OAAOE,MAAO3B,EAAU4B,SAAU,SAACC,GAAD,OAAO+D,EAAY/D,EAAEC,OAAOH,UACjG,kBAAC2E,EAAA,EAAD,CAAO5E,YAAY,QAAQD,KAAK,OAAOE,MAAOkE,EAAOjE,SAAU,SAACC,GAAD,OAAOiE,EAASjE,EAAEC,OAAOH,UACxF,kBAAC2E,EAAA,EAAD,CAAO5E,YAAY,WAAWD,KAAK,WAAWE,MAAOoE,EAAUnE,SAAU,SAACC,GAAD,OAAOmE,EAAYnE,EAAEC,OAAOH,UAErG,kBAAC2C,EAAA,EAAD,CAAQ7C,KAAK,SAAS8C,QA5CjB,SAACvC,GACdA,EAAMC,iBAENtC,EACG4G,+BAA+BV,EAAOE,GACtCV,MAAK,SAACc,GACL,OAAOA,EAASpG,KAAKyG,cAAc,CACjCrE,YAAanC,OAGhByG,OAAM,SAACC,GAAD,OAASzB,MAAMyB,EAAIxB,YAE5BxB,GAAQ,KAgCA,cAKN,kBAACO,EAAA,EAAD,CACER,KAAM+B,EACNtB,QAAS,kBAAMuB,GAAc,KAE7B,yBAAKtB,MAAOX,EAAYpC,UAAWuC,EAAQb,OACzC,0BAAM1B,UAAU,eACd,gCACA,wBAAIA,UAAU,oBAAd,kBAGA,kBAACkF,EAAA,EAAD,CAAO5E,YAAY,QAAQD,KAAK,OAAOE,MAAOkE,EAAOjE,SAAU,SAACC,GAAD,OAAOiE,EAASjE,EAAEC,OAAOH,UACxF,kBAAC2E,EAAA,EAAD,CAAO5E,YAAY,WAAWD,KAAK,WAAWE,MAAOoE,EAAUnE,SAAU,SAACC,GAAD,OAAOmE,EAAYnE,EAAEC,OAAOH,UAErG,kBAAC2C,EAAA,EAAD,CAAQ7C,KAAK,SAAS8C,QA/CjB,SAACvC,GACdA,EAAMC,iBAENtC,EACGgH,2BAA2Bd,EAAOE,GAClCU,OAAM,SAACC,GAAD,OAASzB,MAAMyB,EAAIxB,YAE5BO,GAAc,KAwCN,cAKN,yBAAKrE,UAAU,eACb,wBACEA,UAAU,oBADZ,iBAKCrB,EACC,kBAACuE,EAAA,EAAD,CAAQC,QAAS,kBAAM5E,EAAKiH,YAA5B,UAEE,yBAAKxF,UAAU,uBACb,kBAACkD,EAAA,EAAD,CAAQC,QAAS,kBAAMb,GAAQ,KAA/B,WACA,kBAACY,EAAA,EAAD,CAAQC,QAAS,kBAAMkB,GAAc,KAArC,aAKR,yBAAKrE,UAAU,cACb,yBAAKA,UAAU,kBAEXsE,EAAMxE,KAAI,gBAAGkF,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACR,kBAAC,EAAD,CAAMvG,OAAQsG,EAAIrG,KAAMA,EAAMC,SAAUqG,EAAKrG,SAAUE,QAASmG,EAAKnG,QAASD,SAAUoG,EAAKpG,eAInG,yBAAKmB,UAAU,mBACb,kBAAC,IAAD,CACEkE,IAAI,GACJuB,SAAU,IACVC,aAAa,EACbC,iBAAiB,MACjBC,SAAS,GACTC,cAAY,EACZC,UAAW,aACXC,UAAW,aACXC,cAAe,aACfC,UAAW,iBAKvB,yBAAKjG,UAAU,cAEV,OAAJrB,QAAI,IAAJA,OAAA,EAAAA,EAAMoC,aACL,kBAAC,EAAD,CAAanC,SAAUD,EAAKoC,cAE1B,kEC5LgBmF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd3B,OAAM,SAAAzB,GACLtE,QAAQsE,MAAMA,EAAME,c","file":"static/js/main.46979ba4.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    \r\n        apiKey: \"AIzaSyDCwSYT_vQjaJrxT3KojX2PYzU0QvF-pt0\",\r\n    authDomain: \"public-column.firebaseapp.com\",\r\n    databaseURL: \"https://public-column.firebaseio.com\",\r\n    projectId: \"public-column\",\r\n    storageBucket: \"public-column.appspot.com\",\r\n    messagingSenderId: \"581608610394\",\r\n    appId: \"1:581608610394:web:d9848a57d91942602fd663\",\r\n    measurementId: \"G-DKQRE8LRHF\"\r\n      \r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage  = firebase.storage();\r\n\r\nexport {db,auth,storage};\r\n\r\n\r\n\r\n//  export default db;","import React, { useState, useEffect } from 'react'\r\nimport './Post.css'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { db } from './firebase'\r\nimport firebase from 'firebase'\r\n\r\nfunction Post({ postId, user, username, imageUrl, caption }) {\r\n    const [comments, setComments] = useState([])\r\n    const [comment, setComment] = useState('')\r\n\r\n    useEffect(() => {\r\n        let unsubscribe\r\n        if (postId) {\r\n            console.log(postId)\r\n            unsubscribe = db\r\n                .collection('posts')\r\n                .doc(postId)\r\n                .collection('comments')\r\n                .orderBy('timestamp', 'asc')\r\n                .onSnapshot((snapshot) => {\r\n                    setComments(snapshot.docs.map((doc) => doc.data()))\r\n                    console.log(comments)\r\n                })\r\n        }\r\n\r\n        return () => {\r\n            unsubscribe()\r\n        }\r\n\r\n    }, [postId])\r\n\r\n    const postComment = (event) => {\r\n        event.preventDefault()\r\n\r\n        db.collection('posts').doc(postId).collection('comments').add({\r\n            text: comment,\r\n            username: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n        setComment('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__header\">\r\n                <Avatar\r\n                    className='post__avatar'\r\n                    alt={username.username}\r\n                    src='static/images/avatar/1.jpg'\r\n                />\r\n                <h3>{username.username}</h3>\r\n            </div>\r\n            \r\n            <img className=\"post__image\" src={imageUrl} alt=\"\" />\r\n            <h4 className=\"post__text\"> <strong>{username.username}</strong> {caption}</h4>\r\n\r\n           {user && (\r\n            <div className=\"post__comments\">\r\n            {comments.map((comment)=>(\r\n                <p>\r\n                    <strong>{comment.username}</strong> {comment.text}\r\n                </p>\r\n            ))}\r\n        </div>\r\n           )} \r\n            \r\n            \r\n            {user && (\r\n                <form className='post__commentBox'>\r\n                <input\r\n                    className='post__input'\r\n                    type=\"text\"\r\n                    placeholder='Add a comment...'\r\n                    value={comment}\r\n                    onChange={(e) => setComment(e.target.value)}\r\n                />\r\n                <button\r\n                    className='post__button'\r\n                    disabled={!comment}\r\n                    disabled={!user}\r\n                    type='submit'\r\n                    onClick={postComment}>Post</button>\r\n            </form>\r\n            \r\n            )}\r\n\r\n                \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, { useEffect, useState } from 'react'\r\nimport {Button, makeStyles, Modal} from \"@material-ui/core\";\r\nimport {storage,db} from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport './ImageUpload.css';\r\nimport { yellow } from '@material-ui/core/colors';\r\n\r\n\r\nfunction getModalStyle() {\r\n    const top = 50\r\n    const left = 50\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n  }\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 800,\r\n      backgroundColor: '#A3EBDF',\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nfunction ImageUpload(username) {\r\n\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useStyles()\r\n\r\n\r\n    const [caption , setCaption] = useState('');\r\n    const [progress , setProgress] =useState(0);\r\n    const [image,setImage] = useState(null);\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0]);\r\n                }\r\n    };\r\n\r\n    const handleUpload = (e) => {\r\n       const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n       uploadTask.on(\r\n           \"state_changed\",\r\n           (snapshot) => {\r\n               const progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n              setProgress(progress);\r\n           },\r\n           (error) => {\r\n               console.log(error);\r\n               alert(error.message);\r\n           },\r\n           () => {\r\n               storage.ref(\"images\")\r\n               .child(image.name)\r\n               .getDownloadURL()\r\n               .then(url => {\r\n                   db.collection(\"posts\").add({\r\n                       timestamp : firebase.firestore.FieldValue.serverTimestamp(),\r\n                       caption:caption,\r\n                       imageUrl:url,\r\n                       username:username\r\n                   });\r\n                   setProgress(0);\r\n                   setCaption(\"\");\r\n                   setImage(null);\r\n                   setOpen(false)\r\n               });\r\n           }\r\n       )\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"upload\">\r\n        <Modal\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n      >\r\n      <div style={modalStyle} className={classes.paper}>\r\n      <div className=\"imageupload\">\r\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\r\n      <input type=\"text\" placeholder=\"Enter a Caption\" onChange={ event => setCaption(event.target.value)} value={caption}/>\r\n      <input type=\"file\" onChange={handleChange}/>\r\n      <Button onClick={handleUpload}>\r\n      Upload\r\n      </Button>\r\n\r\n   </div>\r\n      </div>\r\n\r\n      \r\n      </Modal>\r\n\r\n      <div className=\"upload__img\">\r\n              <img className=\"img__uploading\" onClick={() => setOpen(true)} src=\"https://img.icons8.com/bubbles/2x/up.png\"></img>\r\n            </div>\r\n     \r\n        </div>\r\n        \r\n      \r\n    );\r\n}\r\n\r\nexport default ImageUpload\r\n","import React, { useEffect } from 'react';\nimport { useState } from 'react'\n\nimport './App.css';\nimport Post from './Post';\nimport ImageUpload from './ImageUpload';\n\nimport { db, auth } from './firebase'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Modal from '@material-ui/core/Modal'\nimport { Button, Input } from '@material-ui/core'\n\nimport InstagramEmbed from 'react-instagram-embed'\n\n\nfunction getModalStyle() {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: '#CCF2E8',\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles()\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false)\n\n  const [posts, setPosts] = useState([])\n  const [username, setUsername] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user has logged in\n        console.log(authUser)\n        setUser(authUser)\n\n        // if (authUser.displayName) {\n        //   //dont update username\n        // } else {\n        //   //if we just created someone\n        //   return authUser.updateProfile({\n        //     displayName: username\n        //   })\n        // }\n\n      } else {\n        //user has logged out\n        setUser(null)\n      }\n    })\n\n    return () => {\n      // perform some cleanup actions\n      unsubscribe()\n    }\n  }, [user, username])\n\n  useEffect(() => {\n    db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      // every time a new post is added fire this code off\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })))\n    })\n  }, [])\n\n  const signUp = (event) => {\n    event.preventDefault()\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .catch((err) => alert(err.message))\n\n    setOpen(false)\n  }\n\n  const signIn = (event) => {\n    event.preventDefault()\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((err) => alert(err.message))\n\n    setOpenSignIn(false)\n  }\n\n\n\n  return (\n    <div className=\"App\">\n\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signUp\">\n            <center>\n              <h5 className=\"app__headerImage\" >Public Column</h5>\n            </center>\n\n            <Input placeholder='username' type='text' value={username} onChange={(e) => setUsername(e.target.value)} />\n            <Input placeholder='email' type='text' value={email} onChange={(e) => setEmail(e.target.value)} />\n            <Input placeholder='password' type='password' value={password} onChange={(e) => setPassword(e.target.value)} />\n\n            <Button type='submit' onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal\n        open={openSignIn}\n        onClose={() => setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signUp\">\n            <center>\n            <h5 className=\"app__headerImage\" >Public Column</h5>\n           </center>\n\n            <Input placeholder='email' type='text' value={email} onChange={(e) => setEmail(e.target.value)} />\n            <Input placeholder='password' type='password' value={password} onChange={(e) => setPassword(e.target.value)} />\n\n            <Button type='submit' onClick={signIn}>Sign In</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <h1\n          className=\"app__headerImage\"\n         \n        >Public Column</h1>\n\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n            <div className=\"app__loginContainer\">\n              <Button onClick={() => setOpen(true)}>Sign Up</Button>\n              <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            </div>\n          )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {\n            posts.map(({ id, post }) => (\n              <Post postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n            ))\n          }\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url=''\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => { }}\n            onSuccess={() => { }}\n            onAfterRender={() => { }}\n            onFailure={() => { }}\n          />\n        </div>\n      </div>\n\n<div className=\"app__info\">\n\n{user?.displayName ? (\n  <ImageUpload username={user.displayName} />\n) : (\n    <h3>Please Login to upload here !!!</h3>\n  )}\n\n</div>\n     \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}